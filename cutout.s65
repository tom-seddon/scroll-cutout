;-------------------------------------------------------------------------
; 	RASTER FX FRAMEWORK
;-------------------------------------------------------------------------

;-------------------------------------------------------------------------
; 	OS defines
;-------------------------------------------------------------------------

osfile = $FFDD
oswrch = $FFEE
osasci = $FFE3
osbyte = $FFF4
osword = $FFF1
osfind = $FFCE
osgbpb = $FFD1
osargs = $FFDA
oscli=$fff7

;-------------------------------------------------------------------------

mode2_palette .function index,physical
                .endf (index<<4)|(physical^7)

                ; this produces the left value
mode2_left .function index
                .endf ((index&8)<<4)|((index&4)<<3)|((index&2)<<2)|((index&1)<<1)

mode2_right .function index
                .endf mode2_left(index)>>1

mode2_value .function left,right
                .endf mode2_left(left)|mode2_right(right)

                ; http://6502.org/tutorials/65c02opcodes.html

nop1 .macro
                .byte $03       ; 1 cycle
                .endm

nops: .macro ncycles

n:=\ncycles
                .rept n/12
                jsr cycles_wait_12
n:=n-12
                .next

                .rept n/2
                nop
n:=n-2
                .next

                .if n%2==1
                .nop1
                .endif
                
                .endm
                
; ; Palette values for ULA
; PAL_black	= (0 ^ 7)
; PAL_blue	= (4 ^ 7)
; PAL_red		= (1 ^ 7)
; PAL_magenta = (5 ^ 7)
; PAL_green	= (2 ^ 7)
; PAL_cyan	= (6 ^ 7)
; PAL_yellow	= (3 ^ 7)
; PAL_white	= (7 ^ 7)

;-------------------------------------------------------------------------

;-------------------------------------------------------------------------
; 	SYSTEM defines
;-------------------------------------------------------------------------

; MODE1_COL0=$00
; MODE1_COL1=$20
; MODE1_COL2=$80
; MODE1_COL3=$A0

;-------------------------------------------------------------------------
; 	MACROS
;-------------------------------------------------------------------------

;-------------------------------------------------------------------------
; 	GLOBAL constants
;-------------------------------------------------------------------------

glyph_subrows=12
video_control_value=$f4                 ;mode 2
access_shadow=4
display_shadow=1

video_control=$fe20   
video_palette=$fe21
acccon=$fe34
                
; Default screen address
screen_addr = $3000
SCREEN_SIZE_BYTES = $8000 - screen_addr

; Exact time for a 50Hz frame less latch load time
FramePeriod = 312*64-2

; Calculate here the timer value to interrupt at the desired line
TimerValue = 32*64 - 2*64 - 2 - 20

; 40 lines for vblank
; 32 lines for vsync (vertical position = 35 / 39)
; interupt arrives 2 lines after vsync pulse
; 2 us for latch
; XX us to fire the timer before the start of the scanline so first colour set on column -1
; YY us for code that executes after timer interupt fires

;-------------------------------------------------------------------------
; 	ZERO PAGE
;-------------------------------------------------------------------------

*=$70
                .dsection bss

; System variables

vsync_counter: .fill 2		; counts up with each vsync
escape_pressed: .fill 1         ; set when Escape key pressed
                
; FX variables

fx_colour_index: .fill 1        ; index into our colour palette
row_index: .fill 1
checquerboard_index: .fill 1
scrolltext_ptr: .fill 2
glyph_row: .fill 1
glyph_subrow_counter: .fill 1
glyph_ptr: .fill 2

                .cerror *>=$9f,"ZP overflow"

;-------------------------------------------------------------------------
; 	CODE START
;-------------------------------------------------------------------------

*=$e00
                .dsection code
start:

main_start:

;-------------------------------------------------------------------------
; 	Code entry
;-------------------------------------------------------------------------

main: .proc
; Set interrupts

                sei        ; disable interupts
                lda #$7F   ; A=01111111
                sta $FE4E  ; R14=Interrupt Enable (disable all interrupts)
                sta $FE43 ; R3=Data Direction Register "A" (set keyboard data
                ; direction)
                lda #$C2  ; A=11000010
                sta $FE4E ; R14=Interrupt Enable (enable main_vsync and timer
                ; interrupt)
                cli       ; enable interupts

                ; Load SIDEWAYS RAM modules here!

                ; Initalise system vars

                lda #0
                sta vsync_counter
                sta vsync_counter+1
                sta escape_pressed

                ; Set MODE 1

                lda #22
                jsr oswrch
                lda #2
                jsr oswrch

                ; Turn off cursor

                lda #10
                sta $FE00
                lda #32
                sta $FE01

                ; ; Set Colour 2 to White - MODE 1 requires 4x writes to ULA
                ; ; Palette Register

                ; lda #MODE1_COL2 + PAL_white
                ; sta $FE21
                ; eor #$10
                ; sta $FE21
                ; eor #$40
                ; sta $FE21
                ; eor #$10
                ; sta $FE21

                ; Initialise system modules here!

                ; DEMO START - from here on out there are no interrupts enabled!!

                sei

                jsr fx_kill_function

	; Exact cycle VSYNC by Hexwab

		lda #2
-
		bit $FE4D
		beq -           ; wait for vsync

		;now we're within 10 cycles of vsync having hit

		;delay just less than one frame
syncloop:
		sta $FE4D ; 4(stretched), ack vsync

		;{ this takes (5*ycount+2+4)*xcount cycles
		;x=55,y=142 -> 39902 cycles. one frame=39936
		ldx #142 ;2
deloop:
		ldy #55 ;2
innerloop:
		dey ;2
		bne innerloop ;3
		; =152
		dex ; 2
		bne deloop ;3
		;}

                ldx #<TimerValue ; nop
                ldy #>TimerValue ; nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop ; +16
                
		bit $FE4D ;4(stretched)
		bne syncloop ; +3
		; 4+39902+16+4+3+3 = 39932
		; ne means vsync has hit
		; loop until it hasn't hit

		;now we're synced to vsync

                ; Set up Timers

set_timers:
                ; Write T1 low now (the timer will not be written
                ; until you write the high byte)
                ; lda #<TimerValue
                stx $FE44
                
                ; Get high byte ready so we can write it as quickly as
                ; possible at the right moment
                ; ldx #>TimerValue
                sty $FE45  ; start T1 counting ; 4c +1/2c

                ; Latch T1 to interupt exactly every 50Hz frame
                lda #<FramePeriod
                sta $FE46
                lda #>FramePeriod
                sta $FE47

                ; Initialise FX modules here

call_init:
                jsr fx_init_function

                ; We don't know how long the init took so resync to timer 1

		lda #$42
		sta $FE4D	; clear vsync $ timer 1 flags

		; Wait for Timer1 at rasterline 0

		lda #$40
-
		bit $FE4D
		beq -
		sta $FE4D

		; Now can enter main loop with enough time to do work

                ; Update typically happens during vblank so wait 255 lines
                ; But don't forget that the loop also takes time!!

		ldx #245
-
		jsr cycles_wait_128
		dex
		bne -

                ; MAIN LOOP

main_loop:

                ;  Do useful work during vblank (vsync will occur at
                ;  some point)
		inc vsync_counter
		bne +
		inc vsync_counter+1
+

; Service any system modules here!

; Check for Escape key

                lda #$79
                ldx #($70 ^ $80)
                jsr osbyte
                stx escape_pressed

                ; FX update callback here!

call_update:
                jsr fx_update_function

                ; Wait for first scanline

                ; Wait for T1<256
-
                lda $fe45
                bne -

-
                lda $fe44
                .nop1           ;+1 1    1
                cmp #12         ;+2 3    3
                bcs -           ;+2 5 +3 6 
                .nop1           ;+1 6
                asl a           ;+2 8
                tax             ;+2 10
                jmp (dejitter_routines,x) ;+6 16/8

dejitter_4:
                nop
dejitter_3:
                nop
dejitter_2:
                nop
dejitter_1:
                nop

call_draw:
                jsr fx_draw_function
                
                ; Loop as fast as possible

                jmp main_loop

                ; Get current module to return CRTC to known state

call_kill:
                jsr fx_kill_function

                ; Re-enable useful interupts

                lda #$D3        ; A=11010011
                sta $FE4E       ; R14=Interrupt Enable
                cli

                ; Exit gracefully (in theory)

                rts

dejitter_routines:
                .word call_draw ;0
                .word call_draw ;1
                .word call_draw ;2
                .word call_draw ;3
                .word call_draw ;4
                .word call_draw ;5
                .word call_draw ;6
                .word call_draw ;7
                .word dejitter_1 ;8
                .word dejitter_2 ;9
                .word dejitter_3 ;10
                .word dejitter_4 ;11
                
                .pend
                
;-------------------------------------------------------------------------
; 	HELPER FUNCTIONS
;-------------------------------------------------------------------------

                
cycles_wait_128:		; JSR to get here takes 6c
                .rept 58
                nop
                .next
cycles_wait_12:
                rts

main_end:

;-------------------------------------------------------------------------
; 	FX MODULE
;-------------------------------------------------------------------------

fx_start:

;-------------------------------------------------------------------------
; Initialise FX
;
; The initialise function is used to set up all variables, tables and
; any precalculated screen memory etc. required for the FX.
;
; This function will be called during vblank
; The CRTC registers will be set to default MODE 0,1,2 values
;
; The function can take as long as is necessary to initialise.
;-------------------------------------------------------------------------

fx_init_function: .proc

                lda #mode2_palette(11,0)
                sta video_palette

                lda #mode2_palette(12,0)
                sta video_palette

                lda #access_shadow
                trb acccon

                ldx #<load_pic
                ldy #>load_pic
                jsr oscli

                lda #access_shadow
                tsb acccon


                stz dest+0
                lda #$30
                sta dest+1

                lda #mode2_value(5,5)
-
dest=*+1
                sta $ffff
                inc dest+0
                bne -
                inc dest+1
                bpl -

                lda #access_shadow
                trb acccon

                lda #mode2_palette(11,11)
                sta video_palette

                lda #mode2_palette(12,12)
                sta video_palette

                lda #glyph_subrows
                sta glyph_subrow_counter
                stz glyph_row

                lda #<scrolltext
                sta scrolltext_ptr
                lda #>scrolltext
                sta scrolltext_ptr+1

                rts

load_pic:
                .text "LOAD PIC",13
                .pend

;-------------------------------------------------------------------------
; Update FX
;
; The update function is used to update / tick any variables used
; in the FX. It may also prepare part of the screen buffer before
; drawing commenses but note the strict timing constraints!
;
; This function will be called during vblank, after any system
; modules have been polled.
;
; The function MUST COMPLETE BEFORE TIMER 1 REACHES 0, i.e. before
; raster line 0 begins. If you are late then the draw function will
; be late and your raster timings will be wrong!
;-------------------------------------------------------------------------

fx_update_function: .proc
                ; Increment our index into the palette table
                inc fx_colour_index
                inc fx_colour_index
                stz row_index
                lda fx_colour_index
                sta checquerboard_index

                ; scroll display up
                ldx #1
scroll:
                lda scanlines,x
                sta scanlines-1,x
                inx
                bne scroll

read_scrolltext:
                lda (scrolltext_ptr)

                sec
                sbc #32
                
                stz glyph_ptr+1
                asl a
                asl a
                rol glyph_ptr+1
                asl a
                rol glyph_ptr+1
                adc #<font_data
                sta glyph_ptr+0
                
                lda glyph_ptr+1
                adc #>font_data
                sta glyph_ptr+1

                ldy glyph_row
                lda (glyph_ptr),y

                ; this isn't necessary, strictly speaking, but it
                ; means you get junk, not a crash, when something goes
                ; wrong.
                and #$fe
                sta scanlines+255

                dec glyph_subrow_counter
                bne scrolled

next_glyph_row:
                lda #glyph_subrows
                sta glyph_subrow_counter

                iny
                cpy #8
                bne glyph_row_ok

next_scrolltext_char:
                ldy #0

                inc scrolltext_ptr+0
                bne +
                inc scrolltext_ptr+1
+

                lda (scrolltext_ptr)
                bne scrolltext_ptr_ok

                lda #<scrolltext
                sta scrolltext_ptr
                lda #>scrolltext
                sta scrolltext_ptr+1
scrolltext_ptr_ok:
glyph_row_ok:
                sty glyph_row
scrolled:
                
                rts
                .pend

;-------------------------------------------------------------------------
; Draw FX
;
; The draw function is the main body of the FX.
;
; This function will be exactly at the start* of raster line 0 with
; a maximum jitter of up to +10 cycles.
;
; This means that a new CRTC cycle has just started! If you didn't
; specify the registers from the previous frame then they will be
; the default MODE 0,1,2 values as per initialisation.
;
; If messing with CRTC registers, THIS FUNCTION MUST ALWAYS PRODUCE
; A FULL AND VALID 312 line PAL signal before exiting!
;-------------------------------------------------------------------------

fx_draw_function: .proc

                ldy #0          ;row index
                
                ; shift timing
                ; .nops 

raster_loop:
                ldx checquerboard_index    ;3 3
                lda video_control_values,x ;4 7
                sta video_control          ;4 11
                dec checquerboard_index    ;5 16

                ldx scanlines,y       ;4 20
                lda #display_shadow   ;2 22
                jmp (routines_list,x) ;6 28
                ; 45 73
char_done:
                trb acccon      ;6 79

                .nops 128-84

                iny             ;2 81
                bne raster_loop ;3 84

                rts                

                .pend

                ;

                .include ".tmp/routines.s65"
                .include ".tmp/font.s65"
                
;-------------------------------------------------------------------------
; Kill FX
;
; The kill function is used to tidy up any craziness that your FX
; might have created and return the system back to the expected
; default state, ready to initialise the next FX.
;
; This function will be exactly at the start* of raster line 0 with
; a maximum jitter of up to +10 cycles.
;
; This means that a new CRTC cycle has just started! If you didn't
; specify the registers from the previous frame then they will be
; the default MODE 0,1,2 values as per initialisation.
;
; THIS FUNCTION MUST ALWAYS ENSURE A FULL AND VALID 312 line PAL
; signal will take place this frame! The easiest way to do this is
; to simply call crtc_reset.
;
;-------------------------------------------------------------------------

fx_kill_function: .proc
                ; Set all CRTC registers back to their defaults for MODE 0,1,2

                ldx #13
loop:
                stx $FE00
                lda crtc_regs_default,x
                sta $FE01
                dex
                bpl loop 

                rts
                .pend

fx_end:

;-------------------------------------------------------------------------
; 	SYSTEM DATA
;-------------------------------------------------------------------------

data_start:

crtc_regs_default:
                .byte 127    ; R0  horizontal total
                .byte 80     ; R1  horizontal displayed
                .byte 98     ; R2  horizontal position
                .byte $28    ; R3  sync width 40 = $28
                .byte 38     ; R4  vertical total
                .byte 0      ; R5  vertical total adjust
                .byte 32     ; R6  vertical displayed
                .byte 35     ; R7  vertical position; 35=top of screen
                .byte $0     ; R8  interlace; $30 = HIDE SCREEN
                .byte 7      ; R9  scanlines per row
                .byte 32     ; R10 cursor start
                .byte 8      ; R11 cursor end
                .byte >(screen_addr/8)	; R12 screen start address, high
                .byte <(screen_addr/8)	; R13 screen start address, low

; osfile_filename:
;                 .text "Screen",13

; osfile_params:
; osfile_nameaddr:
;                 .word osfile_filename
;                 ; file load address
; osfile_loadaddr:
;                 .dword screen_addr
;                 ; file exec address
; osfile_execaddr:
;                 .dword 0
;                 ; start address or length
; osfile_length:
;                 .dword 0
;                 ; end address of attributes
; osfile_endaddr:
;                 .dword 0

;-------------------------------------------------------------------------
; 	FX DATA
;-------------------------------------------------------------------------

                .align $100
video_control_values:
                .for i=0,i<256,i+=1
                .byte video_control_value|((i>>4)&1)
                .next

                .align $100
scanlines:
                .fill 256,0

scrolltext:
                .text 'SCROLL TEXT PROTOTYPE!',0

data_end:

;-------------------------------------------------------------------------
; 	End address to be saved
;-------------------------------------------------------------------------

.end

;-------------------------------------------------------------------------
; 	Save the code
;-------------------------------------------------------------------------

; SAVE "MyFX", start, end

;-------------------------------------------------------------------------
; 	Space reserved for runtime buffers not preinitialised
;-------------------------------------------------------------------------

.bss_start
.bss_end

;-------------------------------------------------------------------------
; 	Memory Info
;-------------------------------------------------------------------------

; PRINT "------"
; PRINT "RASTER FX"
; PRINT "------"
; PRINT "MAIN size =", ~main_end-main_start
; PRINT "FX size = ", ~fx_end-fx_start
; PRINT "DATA size =",~data_end-data_start
; PRINT "BSS size =",~bss_end-bss_start
; PRINT "------"
; PRINT "HIGH WATERMARK =", ~P%
; PRINT "FREE =", ~screen_addr-P%
; PRINT "------"

;-------------------------------------------------------------------------
;	Any other files for the disc
;-------------------------------------------------------------------------

; PUTBASIC "circle.bas", "Circle"
; PUTFILE "screen.bin", "Screen", $3000

                .cerror *>=$3000,'overflow into display memory'